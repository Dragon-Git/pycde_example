from .bit_pat import BitPat
#   Loads
class RV32I:
    def __init__(self):
        self.LB     = BitPat("b?????????????????000?????0000011")
        self.LH     = BitPat("b?????????????????001?????0000011")
        self.LW     = BitPat("b?????????????????010?????0000011")
        self.LBU    = BitPat("b?????????????????100?????0000011")
        self.LHU    = BitPat("b?????????????????101?????0000011")
        #   Stores
        self.SB     = BitPat("b?????????????????000?????0100011")
        self.SH     = BitPat("b?????????????????001?????0100011")
        self.SW     = BitPat("b?????????????????010?????0100011")
        #   Shifts
        self.SLL    = BitPat("b0000000??????????001?????0110011")
        self.SLLI   = BitPat("b0000000??????????001?????0010011")
        self.SRL    = BitPat("b0000000??????????101?????0110011")
        self.SRLI   = BitPat("b0000000??????????101?????0010011")
        self.SRA    = BitPat("b0100000??????????101?????0110011")
        self.SRAI   = BitPat("b0100000??????????101?????0010011")
        #   Arithmetic
        self.ADD    = BitPat("b0000000??????????000?????0110011")
        self.ADDI   = BitPat("b?????????????????000?????0010011")
        self.SUB    = BitPat("b0100000??????????000?????0110011")
        self.LUI    = BitPat("b?????????????????????????0110111")
        self.AUIPC  = BitPat("b?????????????????????????0010111")
        #   Logical
        self.XOR    = BitPat("b0000000??????????100?????0110011")
        self.XORI   = BitPat("b?????????????????100?????0010011")
        self.OR     = BitPat("b0000000??????????110?????0110011")
        self.ORI    = BitPat("b?????????????????110?????0010011")
        self.AND    = BitPat("b0000000??????????111?????0110011")
        self.ANDI   = BitPat("b?????????????????111?????0010011")
        #   Compare
        self.SLT    = BitPat("b0000000??????????010?????0110011")
        self.SLTI   = BitPat("b?????????????????010?????0010011")
        self.SLTU   = BitPat("b0000000??????????011?????0110011")
        self.SLTIU  = BitPat("b?????????????????011?????0010011")
        #   Branches
        self.BEQ    = BitPat("b?????????????????000?????1100011")
        self.BNE    = BitPat("b?????????????????001?????1100011")
        self.BLT    = BitPat("b?????????????????100?????1100011")
        self.BGE    = BitPat("b?????????????????101?????1100011")
        self.BLTU   = BitPat("b?????????????????110?????1100011")
        self.BGEU   = BitPat("b?????????????????111?????1100011")
        #   Jump & Link
        self.JAL    = BitPat("b?????????????????????????1101111")
        self.JALR   = BitPat("b?????????????????000?????1100111")
        #   Synch
        self.FENCE  = BitPat("b0000????????00000000000000001111")
        self.FENCEI = BitPat("b00000000000000000001000000001111")
        #   CSR Access
        self.CSRRW  = BitPat("b?????????????????001?????1110011")
        self.CSRRS  = BitPat("b?????????????????010?????1110011")
        self.CSRRC  = BitPat("b?????????????????011?????1110011")
        self.CSRRWI = BitPat("b?????????????????101?????1110011")
        self.CSRRSI = BitPat("b?????????????????110?????1110011")
        self.CSRRCI = BitPat("b?????????????????111?????1110011")
        #   Change Level
        self.ECALL  = BitPat("b00000000000000000000000001110011")
        self.EBREAK = BitPat("b00000000000100000000000001110011")
        self.ERET   = BitPat("b00010000000000000000000001110011")
        self.WFI    = BitPat("b00010000001000000000000001110011")
        # NOP
        self.NOP = BitPat("b00000000000000000000000000010011").as_bits()
